{"version":3,"file":"HeaderRow.js","sourceRoot":"","sources":["../src/HeaderRow.tsx"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,+BAAiD;AAEjD,2CAAsC;AAEtC,iCAA2C;AAkB3C,SAAS,SAAS,CAA2B,EAUlB;QATzB,OAAO,aAAA,EACP,IAAI,UAAA,EACJ,MAAM,YAAA,EACN,oBAAoB,0BAAA,EACpB,eAAe,qBAAA,EACf,cAAc,oBAAA,EACd,UAAU,gBAAA,EACV,aAAa,mBAAA,EACb,MAAM,YAAA;IAEN,IAAM,4BAA4B,GAAG,mBAAW,CAAC,UAAC,OAAgB;;QAChE,IAAI,CAAC,oBAAoB;YAAE,OAAO;QAElC,wBAAgB,CAAC,MAAM,CAAC,CAAC;QAEzB,IAAM,eAAe,GAAG,IAAI,GAAG,EAAQ,CAAC;QACxC,IAAI,OAAO,EAAE;;gBACX,KAAkB,IAAA,SAAA,SAAA,IAAI,CAAA,0BAAA,4CAAE;oBAAnB,IAAM,GAAG,iBAAA;oBACZ,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;iBAClC;;;;;;;;;SACF;QAED,oBAAoB,CAAC,eAAe,CAAC,CAAC;IACxC,CAAC,EAAE,CAAC,oBAAoB,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;IAEzC,OAAO,CACL,uCACE,IAAI,EAAC,KAAK,mBACK,CAAC,EAChB,SAAS,EAAC,gBAAgB,IAEzB,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM;QACjB,OAAO,CACL,8BAAC,oBAAU,IACT,GAAG,EAAE,MAAM,CAAC,GAAG,EACf,MAAM,EAAE,MAAM,EACd,QAAQ,EAAE,cAAc,EACxB,eAAe,EAAE,eAAe,EAChC,wBAAwB,EAAE,4BAA4B,EACtD,MAAM,EAAE,MAAM,EACd,UAAU,EAAE,UAAU,EACtB,aAAa,EAAE,aAAa,GAC5B,CACH,CAAC;IACJ,CAAC,CAAC,CACE,CACP,CAAC;AACJ,CAAC;AAED,kBAAe,YAAI,CAAC,SAAS,CAA+E,CAAC","sourcesContent":["import React, { useCallback, memo } from 'react';\n\nimport HeaderCell from './HeaderCell';\nimport { CalculatedColumn } from './types';\nimport { assertIsValidKey } from './utils';\nimport { DataGridProps } from './DataGrid';\n\ntype SharedDataGridProps<R, K extends keyof R, SR> = Pick<DataGridProps<R, K, SR>,\n  | 'rows'\n  | 'onSelectedRowsChange'\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n  | 'rowKey'\n>;\n\nexport interface HeaderRowProps<R, K extends keyof R, SR> extends SharedDataGridProps<R, K, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n}\n\nfunction HeaderRow<R, K extends keyof R, SR>({\n  columns,\n  rows,\n  rowKey,\n  onSelectedRowsChange,\n  allRowsSelected,\n  onColumnResize,\n  sortColumn,\n  sortDirection,\n  onSort\n}: HeaderRowProps<R, K, SR>) {\n  const handleAllRowsSelectionChange = useCallback((checked: boolean) => {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKey(rowKey);\n\n    const newSelectedRows = new Set<R[K]>();\n    if (checked) {\n      for (const row of rows) {\n        newSelectedRows.add(row[rowKey]);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }, [onSelectedRowsChange, rows, rowKey]);\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className=\"rdg-header-row\"\n    >\n      {columns.map(column => {\n        return (\n          <HeaderCell<R, SR>\n            key={column.key}\n            column={column}\n            onResize={onColumnResize}\n            allRowsSelected={allRowsSelected}\n            onAllRowsSelectionChange={handleAllRowsSelectionChange}\n            onSort={onSort}\n            sortColumn={sortColumn}\n            sortDirection={sortDirection}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, K extends keyof R, SR>(props: HeaderRowProps<R, K, SR>) => JSX.Element;\n"]}