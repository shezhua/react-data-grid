{"version":3,"file":"Cell.js","sourceRoot":"","sources":["../src/Cell.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { forwardRef, memo, useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { CellRendererProps } from './types';\nimport { wrapEvent } from './utils';\nimport { useCombinedRefs } from './hooks';\n\nfunction Cell<R, SR>({\n  className,\n  column,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  isRowSelected,\n  row,\n  rowIdx,\n  eventBus,\n  dragHandleProps,\n  onRowClick,\n  onFocus,\n  onKeyDown,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  ...props\n}: CellRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  const cellRef = useRef<HTMLDivElement>(null);\n\n  const { cellClass } = column;\n  className = clsx(\n    'rdg-cell',\n    {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.isLastFrozenColumn,\n      'rdg-cell-selected': isCellSelected,\n      'rdg-cell-copied': isCopied,\n      'rdg-cell-dragged-over': isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n\n  function selectCell(openEditor?: boolean) {\n    eventBus.dispatch('SELECT_CELL', { idx: column.idx, rowIdx }, openEditor);\n  }\n\n  function handleClick() {\n    selectCell(column.editorOptions?.editOnClick);\n    onRowClick?.(rowIdx, row, column);\n  }\n\n  function handleContextMenu() {\n    selectCell();\n  }\n\n  function handleDoubleClick() {\n    selectCell(true);\n  }\n\n  function onRowSelectionChange(checked: boolean, isShiftClick: boolean) {\n    eventBus.dispatch('SELECT_ROW', { rowIdx, checked, isShiftClick });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      ref={useCombinedRefs(cellRef, ref)}\n      className={className}\n      style={{\n        width: column.width,\n        left: column.left\n      }}\n      onFocus={onFocus}\n      onKeyDown={onKeyDown}\n      onClick={wrapEvent(handleClick, onClick)}\n      onDoubleClick={wrapEvent(handleDoubleClick, onDoubleClick)}\n      onContextMenu={wrapEvent(handleContextMenu, onContextMenu)}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          <column.formatter\n            column={column}\n            rowIdx={rowIdx}\n            row={row}\n            isCellSelected={isCellSelected}\n            isRowSelected={isRowSelected}\n            onRowSelectionChange={onRowSelectionChange}\n          />\n          {dragHandleProps && (\n            <div className=\"rdg-cell-drag-handle\" {...dragHandleProps} />\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(forwardRef(Cell)) as <R, SR = unknown>(props: CellRendererProps<R, SR> & React.RefAttributes<HTMLDivElement>) => JSX.Element;\n"]}